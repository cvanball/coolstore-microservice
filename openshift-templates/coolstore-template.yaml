apiVersion: v1
kind: Template
labels:
  demo: coolstore-microservice
  template: coolstore-template
metadata:
  annotations:
    description: CoolStore demo microservices application template
    iconClass: icon-java
    tags: microservice,jboss,spring
  name: coolstore-template
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: default
# UI
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: web-ui
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: web-ui
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: web-ui:latest
    source:
      contextDir: coolstore-ui
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
          value: ${NPM_MIRROR}
        - name: BOWER_MIRROR
          value: ${BOWER_MIRROR}
        from:
          kind: ImageStreamTag
          name: nodejs:4
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: web-ui
  spec:
    replicas: 1
    selector:
      application: web-ui
      deploymentconfig: web-ui
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: web-ui
          deploymentconfig: web-ui
      spec:
        containers:
        - env:
          - name: COOLSTORE_GW_SERVICE
            value: coolstore-gw
          - name: HOSTNAME_HTTP
            value: web-ui:8080
          image: web-ui
          imagePullPolicy: Always
          name: web-ui
          ports:
          - containerPort: 8080
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - web-ui
        from:
          kind: ImageStreamTag
          name: web-ui:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: web-ui
    name: web-ui
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: web-ui
- apiVersion: v1
  kind: Route
  metadata:
    name: web-ui
  spec:
    to:
      kind: Service
      name: web-ui
# Coolstore Gateway
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: fis-java-openshift
  spec:
    dockerImageRepository: registry.access.redhat.com/jboss-fuse-6-tech-preview/fis-java-openshift
    tags:
    - name: "2.0"
      annotations:
        description: JBoss Fuse Integration Services 2.0 Java S2I images.
        iconClass: icon-jboss
        supports: jboss-fuse:6.3.0,java:8,xpaas:1.2
        tags: builder,jboss-fuse,java,xpaas
        version: "2.0"
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    labels:
      component: coolstore-gw
      group: quickstarts
      project: coolstore
      provider: s2i
      version: 1.0
    name: coolstore-gw
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: coolstore-gw
    labels:
      component: coolstore-gw
      group: quickstarts
      project: coolstore
      provider: s2i
      version: 1.0
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: coolstore-gw:latest
    source:
      contextDir: coolstore-gw
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_ARGS
          value: package -DskipTests -Dfabric8.skip -e -B -Pearly-access-repo
        forcePull: true
        from:
          kind: ImageStreamTag
          name: fis-java-openshift:2.0
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: coolstore-gw
    labels:
      component: coolstore-gw
      group: quickstarts
      project: coolstore
      provider: s2i
      version: 1.0
  spec:
    replicas: 1
    selector:
      deploymentconfig: coolstore-gw
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: coolstore-gw
          deploymentconfig: coolstore-gw
        name: coolstore-gw
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: library/coolstore-gw:latest
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 180
          name: coolstore-gw
          ports:
          - containerPort: 8778
            name: jolokia
          readinessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 10
          resources: {}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - coolstore-gw
        from:
          kind: ImageStreamTag
          name: coolstore-gw:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The coolstore-gw service's http port.
    labels:
      app: coolstore-gw
    name: coolstore-gw
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: coolstore-gw
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for application's coolstore-gw http service.
    name: coolstore-gw
  spec:
    to:
      kind: Service
      name: coolstore-gw
# Inventory Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: inventory-service
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: inventory-service
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: inventory-service:latest
    source:
      contextDir: inventory-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-eap70-openshift:1.4
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: inventory-service
  spec:
    replicas: 1
    selector:
      deploymentconfig: inventory-service
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: inventory-service
          deploymentconfig: inventory-service
        name: inventory-service
      spec:
        containers:
        - env:
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=inventory-service
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MQ_CLUSTER_PASSWORD
            value: 7mzX0pLV03
          - name: JGROUPS_CLUSTER_PASSWORD
            value: CqUo3fYDTv
          - name: AUTO_DEPLOY_EXPLODED
            value: "false"
          - name: DB_SERVICE_PREFIX_MAPPING
            value: inventory-postgresql=DB
          - name: DB_JNDI
            value: java:jboss/datasources/InventoryDS
          - name: DB_USERNAME
            value: ${INVENTORY_DB_USERNAME}
          - name: DB_PASSWORD
            value: ${INVENTORY_DB_PASSWORD}
          - name: DB_DATABASE
            value: inventorydb
          image: inventory-service
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/eap/bin/jboss-cli.sh
                - -c
                - :shutdown(timeout=60)
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          name: inventory-service
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 600Mi
            requests:
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - inventory-service
        from:
          kind: ImageStreamTag
          name: inventory-service:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The inventory service's http port.
      service.alpha.openshift.io/dependencies: '[{"name":"inventory-postgresql","namespace":"","kind":"Service"}]'
    labels:
      app: inventory-service
    name: inventory-service
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: inventory-service
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: inventory-postgresql
  spec:
    replicas: 1
    selector:
      deploymentconfig: inventory-postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: inventory-service
          deploymentconfig: inventory-postgresql
        name: inventory-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${INVENTORY_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${INVENTORY_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: inventorydb
          image: postgresql
          imagePullPolicy: Always
          name: inventory-postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - inventory-postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The database server's port.
    labels:
      application: inventory-service
    name: inventory-postgresql
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: inventory-postgresql
# Catalog Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: catalog-service
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: catalog-service
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: catalog-service:latest
    source:
      contextDir: catalog-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-webserver30-tomcat8-openshift:1.2
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: catalog-service
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog-service
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: catalog-service
          deploymentconfig: catalog-service
        name: catalog-service
      spec:
        containers:
        - env:
          - name: JWS_ADMIN_USERNAME
            value: Skq3VtCd
          - name: JWS_ADMIN_PASSWORD
            value: oktt6yhw
          - name: DB_USERNAME
            value: ${CATALOG_DB_USERNAME}
          - name: DB_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          - name: DB_NAME
            value: catalogdb
          - name: DB_SERVER
            value: catalog-mongodb
          - name: TEIID_USERNAME
            value: ${TEIID_USERNAME}
          - name: TEIID_PASSWORD
            value: ${TEIID_PASSWORD}     
          - name: CATALOG_SERVICE_DS_IMPL   
            value: ${CATALOG_SERVICE_DS_IMPL} 
          image: catalog-service
          imagePullPolicy: Always
          name: catalog-service
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            exec:
              command:
              - /bin/bash
              - -c
              - curl -s -u Skq3VtCd:oktt6yhw 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName'
                |grep -iq 'stateName *= *STARTED'
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 600Mi
            requests:
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog-service
        from:
          kind: ImageStreamTag
          name: catalog-service:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The catalog service's http port.
      service.alpha.openshift.io/dependencies: '[{"name":"catalog-dv","namespace":"","kind":"Service"},{"name":"catalog-mongodb","namespace":"","kind":"Service"}]'
    labels:
      app: catalog-service
    name: catalog-service
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: catalog-service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: catalog-service
    name: catalog-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: catalog-mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: catalog-service
    name: catalog-mongodb
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog-mongodb
    strategy:
      recreateParams:        
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: catalog-service
          deploymentconfig: catalog-mongodb
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            value: ${CATALOG_DB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          - name: MONGODB_DATABASE
            value: catalogdb
          - name: MONGODB_ADMIN_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          image: mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: catalog-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()" && curl https://raw.githubusercontent.com/cvanball/coolstore-microservice/feature/issue-27/jdv-catalog-service/mongodb-data/products.js -o /tmp/products.js && mongo -u $MONGODB_USER -p $MONGODB_PASSWORD $MONGODB_DATABASE /tmp/products.js
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog-mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: catalog-service
    name: catalog-dv
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: jdbc
      port: 31000
      protocol: TCP
      targetPort: 31000
    - name: jdbcs
      port: 31443
      protocol: TCP
      targetPort: 31443            
    selector:
      deploymentconfig: catalog-dv
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: catalog-dv-ext
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: catalog-dv-ext
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: catalog-dv-ext:latest
    source:
      contextDir: ${EXTENSIONS_DIR}
      git:
        ref: ${EXTENSIONS_REPOSITORY_REF}
        uri: ${EXTENSIONS_REPOSITORY_URL}
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: ${EXTENSIONS_DOCKERFILE}
      type: Docker
    triggers:
      - type: GitHub
        github:
          secret: ${GITHUB_WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${GENERIC_WEBHOOK_SECRET}  
      - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: catalog-dv
  spec:
    tags:
    - name: latest       
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: catalog-dv
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: catalog-dv:latest
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
      images: 
        - from:
            kind: ImageStreamTag
            name: catalog-dv-ext:latest
          paths:
          - destinationDir: ./${CONTEXT_DIR}/extensions/extras
            sourcePath: /extensions/.
    strategy:
      type: Source
      sourceStrategy:
        forcePull: true
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: jboss-datavirt63-openshift:latest
        env:
          - name: CUSTOM_INSTALL_DIRECTORIES
            value: extensions/*
    triggers:
      - type: GitHub
        github: 
          secret: ${GITHUB_WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${GENERIC_WEBHOOK_SECRET}
      - type: ImageChange
        imageChange: {}
      - type: ImageChange
        imageChange:
          from:
            kind: ImageStreamTag
            name: catalog-dv-ext:latest
      - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: catalog-service
    name: catalog-dv
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog-dv
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: catalog-service
          deploymentconfig: catalog-dv
      spec:
        containers:
        - env:
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=catalog-dv
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace                    
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: TEIID_USERNAME
            value: ${TEIID_USERNAME}
          - name: TEIID_PASSWORD
            value: ${TEIID_PASSWORD}
          - name: MODESHAPE_USERNAME
            value: ${MODESHAPE_USERNAME}
          - name: MODESHAPE_PASSWORD
            value: ${MODESHAPE_PASSWORD}   
          - name: JGROUPS_CLUSTER_PASSWORD
            value: ${JGROUPS_CLUSTER_PASSWORD}       
          - name: MONGODB_USER
            value: ${CATALOG_DB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          - name: MONGODB_DATABASE
            value: catalogdb
          - name: MONGODB_ADMIN_PASSWORD
            value: ${CATALOG_DB_PASSWORD}    
          - name: ENV_FILES
            value: /etc/datavirt-environment/*
          image: catalog-dv
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/livenessProbe.sh
          name: catalog-dv
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP          
          - name: http
            containerPort: 8080
            protocol: TCP          
          - name: https
            containerPort: 8443
            protocol: TCP          
          - name: jdbc
            containerPort: 31000
            protocol: TCP          
          - name: jdbcs
            containerPort: 31443
            protocol: TCP    
          - name: ping
            containerPort: 8888
            protocol: TCP                                      
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/readinessProbe.sh
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /etc/datavirt-environment
            name: configuration
            readOnly: true
          - mountPath: /etc/datavirt-secret-volume
            name: datavirt-keystore-volume
            readOnly: true
          - mountPath: /etc/jgroups-encrypt-secret-volume
            name: datavirt-jgroups-keystore-volume
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 60
        volumes:
        - name: configuration
          secret: 
            secretName: ${CONFIGURATION_NAME}
        - name: datavirt-keystore-volume
          secret: 
            secretName: ${HTTPS_SECRET}
        - name: datavirt-jgroups-keystore-volume
          secret: 
            secretName: ${JGROUPS_ENCRYPT_SECRET}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog-dv
        from:
          kind: ImageStreamTag
          name: catalog-dv:latest
      type: ImageChange
    - type: ConfigChange
# Cart Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: cart-service
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: cart-service
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: cart-service:latest
    source:
      contextDir: cart-service-eap
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-eap70-openshift:1.4
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: cart-service
  spec:
    replicas: 1
    selector:
      deploymentconfig: cart-service
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: cart-service
          deploymentconfig: cart-service
        name: cart-service
      spec:
        containers:
        - env:
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=cart-service
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MQ_CLUSTER_PASSWORD
            value: tRxcBbkpRu
          - name: JGROUPS_CLUSTER_PASSWORD
            value: ZPiKvsqZ9K
          - name: AUTO_DEPLOY_EXPLODED
            value: "false"
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: KIE_SERVER_USER
            value: ${KIE_SERVER_USER}
          - name: KIE_SERVER_PASSWORD
            value: ${KIE_SERVER_PASSWORD}
          image: cart-service
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/eap/bin/jboss-cli.sh
                - -c
                - :shutdown(timeout=60)
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          name: cart-service
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 600Mi
            requests:
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - cart-service
        from:
          kind: ImageStreamTag
          name: cart-service:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The cart service's http port.
    labels:
      app: cart-service
    name: cart-service
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: cart-service
# Pricing Rules Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: pricing-service
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: pricing-service
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: pricing-service:latest
    source:
      contextDir: coolstore
      git:
        ref: ${RULES_GIT_REF}
        uri: ${RULES_GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: KIE_CONTAINER_DEPLOYMENT
          value: ${KIE_CONTAINER_DEPLOYMENT}
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-decisionserver63-openshift:1.3
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: pricing-service
  spec:
    replicas: 1
    selector:
      deploymentconfig: pricing-service
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: pricing-service
          deploymentconfig: pricing-service
        name: pricing-service
      spec:
        containers:
        - env:
          - name: MQ_CLUSTER_PASSWORD
            value: 7mzX0pLV03
          - name: JGROUPS_CLUSTER_PASSWORD
            value: CqUo3fYDTv
          - name: AUTO_DEPLOY_EXPLODED
            value: "false"
          - name: KIE_CONTAINER_DEPLOYMENT
            value: ${KIE_CONTAINER_DEPLOYMENT}
          - name: KIE_SERVER_USER
            value: ${KIE_SERVER_USER}
          - name: KIE_SERVER_PASSWORD
            value: ${KIE_SERVER_PASSWORD}
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=pricing-service
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: pricing-service
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/eap/bin/jboss-cli.sh
                - -c
                - :shutdown(timeout=60)
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /kie-server/docs/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          name: pricing-service
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /kie-server/docs/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 600Mi
            requests:
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - pricing-service
        from:
          kind: ImageStreamTag
          name: pricing-service:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The pricing service's http port.
    labels:
      app: pricing-service
    name: pricing-service
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: pricing-service
parameters:
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://github.com/cvanball/coolstore-microservice
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  required: true
  value: feature/issue-27
- description: Git source URI for decisionserver ruleset
  displayName: Git source repository for decisionserver ruleset
  name: RULES_GIT_URI
  required: true
  value: https://github.com/jbossdemocentral/brms-coolstore-repo.git
- description: Git decisionserver ruleset branch/tag reference
  displayName: Git decisionserver ruleset branch/tag reference
  name: RULES_GIT_REF
  required: true
  value: master
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/content/groups/public/)
  displayName: Maven mirror url
  name: MAVEN_MIRROR_URL
  value: 
- description: NPM mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/repository/npm/)
  displayName: NPM mirror url
  name: NPM_MIRROR
- description: Bower mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/repository/bower-mirror/)
  displayName: Bower mirror url
  name: BOWER_MIRROR
- description: Inventory Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: INVENTORY_DB_USERNAME
  required: true
- description: Inventory Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: INVENTORY_DB_PASSWORD
  required: true
- description: Catalog Service database user name
  name: CATALOG_DB_USERNAME
  value: catalogAdmin
  required: true
- description: Catalog Service database user password
  value: catalogPW
  name: CATALOG_DB_PASSWORD
  required: true
- description: Decision Server Username
  name: KIE_SERVER_USER
  required: true
  value: brmsAdmin
- description: Decision Server Password
  from: '[a-zA-Z]{6}[0-9]{1}!'
  generate: expression
  name: KIE_SERVER_PASSWORD
  required: true
- description: Decision Server Coolstore Rules Container Spec
  name: KIE_CONTAINER_DEPLOYMENT
  required: true
  value: CoolStoreRulesContainer=com.redhat:coolstore:2.0.0
- description: The name of the secret containing configuration properties for the data sources.
  displayName: Configuration Secret Name
  name: CONFIGURATION_NAME
  value: datavirt-app-config
  required: true
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/cvanball/coolstore-microservice
- description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
  value: feature/issue-27
- description: Set this to the relative path to your project if it is not in the root of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
  value: jdv-catalog-service/vdb
- description: The URL of the repository with source code for the extensions image.  The image should have all modules, etc., placed in the \"/extensions/\" directory in the image.  If the contents are in a different directory, the sourcePath for the ImageSource in the BuildConfig must be modified.
  displayName: Extensions Git Repository URL
  name: EXTENSIONS_REPOSITORY_URL
  value: https://github.com/cvanball/coolstore-microservice
- description: Set this to a branch name, tag or other ref of your extensions repository if you are not using the default branch.
  displayName: Extensions Git Reference
  name: EXTENSIONS_REPOSITORY_REF
  value: feature/issue-27
- description: Set this to the relative path to your project if it is not in the root of your extensions repository.
  displayName: Extensions Context Directory
  name: EXTENSIONS_DIR
  value: jdv-catalog-service/extensions
- description: Set this to the relative path to the Dockerfile in your extensions directory.
  displayName: Extensions Dockerfile
  name: EXTENSIONS_DOCKERFILE
  value: Dockerfile
- description: The name of the service account to use for the deployment.  The service account should be configured to allow usage of the secret(s) specified by CONFIGURATION_NAME, HTTPS_SECRET and JGROUPS_ENCRYPT_SECRET.
  name: SERVICE_ACCOUNT_NAME
  value: datavirt-service-account
- description: The name of the secret containing the keystore to be used for serving secure content.
  displayName: Server Keystore Secret Name
  name: HTTPS_SECRET
  value: datavirt-app-secret
- description: The name of the keystore file within the secret.
  displayName: Server Keystore Filename
  name: HTTPS_KEYSTORE
  value: keystore.jks
  required: false
- description: The type of the keystore file (JKS or JCEKS).
  displayName: Server Keystore Type
  name: HTTPS_KEYSTORE_TYPE
  value: 
  required: false
- description: The name associated with the server certificate.
  displayName: Server Certificate Name
  name: HTTPS_NAME
  value: jboss
  required: false  
- description: The password for the keystore and certificate
  displayName: Server Keystore Password
  name: HTTPS_PASSWORD
  value: mykeystorepass
  required: false  
- description: Username associated with Teiid data service
  displayName: Teiid Username
  name: TEIID_USERNAME
  value: teiidUser
  required: true
- description: Password for Teiid user
  displayName: Teiid User Password
  name: TEIID_PASSWORD
  from: '[a-zA-Z]{6}[0-9]{1}!'
  generate: expression
  required: true
- description: Username associated with ModeShape
  displayName: Modeshape Username
  name: MODESHAPE_USERNAME  
  value: modeshapeUser
  required: true
- description: Password for ModeShape user
  displayName: Modeshape User Password
  name: MODESHAPE_PASSWORD
  from: '[a-zA-Z]{6}[0-9]{1}!'
  generate: expression
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  name: GITHUB_WEBHOOK_SECRET
  from: '[a-zA-Z0-9]{8}!'
  generate: expression
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  name: GENERIC_WEBHOOK_SECRET
  from: '[a-zA-Z0-9]{8}!'
  generate: expression
  required: true
- description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  value: openshift
  required: true
- description: The name of the secret containing the keystore to be used for securing JGroups communications.
  displayName: JGroups Secret Name
  name: JGROUPS_ENCRYPT_SECRET
  value: datavirt-app-secret
  required: false
- description: The name of the keystore file within the JGroups secret.
  displayName: JGroups Keystore Filename
  name: JGROUPS_ENCRYPT_KEYSTORE
  value: jgroups.jceks
  required: false
- description: The name associated with the JGroups server certificate
  displayName: JGroups Certificate Name
  name: JGROUPS_ENCRYPT_NAME
  value: secret-key
  required: false
- description: The password for the keystore and certificate
  displayName: JGroups Keystore Password
  name: JGROUPS_ENCRYPT_PASSWORD
  value: password
  required: false
- description: Password used by JGroups to authenticate nodes in the ClusterFirst
  name: JGROUPS_CLUSTER_PASSWORD
  from: '[a-zA-Z]{6}[0-9]{1}!'
  generate: expression
  required: true
- description: Default CatalogService implementation defaults to MONGODB if empty. Possible values [JDV || MONGODB]
  name: CATALOG_SERVICE_DS_IMPL
  value: MONGODB
  required: false
